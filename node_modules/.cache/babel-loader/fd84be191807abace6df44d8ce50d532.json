{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\michal\\\\Desktop\\\\PRACA INMNZ\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\michal\\\\Desktop\\\\PRACA INMNZ\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{makeAutoObservable}from\"mobx\";import{foodData}from\"../../components/Header/HeaderData\";var FoodListStore=/*#__PURE__*/function(){function FoodListStore(){_classCallCheck(this,FoodListStore);this.foodsData=foodData;this.clickedProduct=[];this.countedProduct={};this.actualProduct={};this.kcal=0;this.proteins=0;this.carbs=0;this.fats=0;this.eaten=0;makeAutoObservable(this);}_createClass(FoodListStore,[{key:\"countingProduct\",value:function countingProduct(){var _this=this;this.kcal=0;this.proteins=0;this.carbs=0;this.fats=0;this.eaten=0;var obj=this.clickedProduct.map(function(item){_this.kcal+=item.kcal;_this.proteins+=item.proteins;_this.carbs+=item.carbs;_this.fats+=item.fats;_this.eaten+=Number(item.eaten);return{kcal:_this.kcal,proteins:_this.proteins,carbs:_this.carbs,fats:_this.fats,eaten:_this.eaten};});this.countedProduct=obj;}},{key:\"updateProduct\",value:function updateProduct(arr){this.clickedProduct=arr;this.countingProduct();}},{key:\"addProduct\",value:function addProduct(item){this.clickedProduct.push(item);this.countingProduct();}},{key:\"addActualProduct\",value:function addActualProduct(obj){this.actualProduct=obj;}},{key:\"filterEl\",value:function filterEl(e){var newList=[];var currList=[];if(e.target.value!==\"\"){currList=this.foodsData;newList=currList.filter(function(item){if(item.name==null){return null;}else{var lc=item.name.toLowerCase();var filtr=e.target.value.toLowerCase();return lc.includes(filtr);}});}else{newList=foodData;}this.foodsData=newList;}}]);return FoodListStore;}();export var products=new FoodListStore();","map":{"version":3,"sources":["C:/Users/michal/Desktop/PRACA INMNZ/frontend/src/store/FoodList/FoodList.js"],"names":["makeAutoObservable","foodData","FoodListStore","foodsData","clickedProduct","countedProduct","actualProduct","kcal","proteins","carbs","fats","eaten","obj","map","item","Number","arr","countingProduct","push","e","newList","currList","target","value","filter","name","lc","toLowerCase","filtr","includes","products"],"mappings":"4QAAA,OAASA,kBAAT,KAAmC,MAAnC,CACA,OAASC,QAAT,KAAyB,oCAAzB,C,GAGMC,CAAAA,a,yBAYF,wBAAc,0CAVdC,SAUc,CAVFF,QAUE,MATdG,cASc,CATG,EASH,MARdC,cAQc,CARG,EAQH,MAPdC,aAOc,CAPE,EAOF,MANdC,IAMc,CANP,CAMO,MALdC,QAKc,CALH,CAKG,MAJdC,KAIc,CAJN,CAIM,MAHdC,IAGc,CAHP,CAGO,MAFdC,KAEc,CAFN,CAEM,CACVX,kBAAkB,CAAC,IAAD,CAAlB,CACH,C,mFAEiB,gBACd,KAAKO,IAAL,CAAY,CAAZ,CACA,KAAKC,QAAL,CAAgB,CAAhB,CACA,KAAKC,KAAL,CAAa,CAAb,CACA,KAAKC,IAAL,CAAY,CAAZ,CACA,KAAKC,KAAL,CAAa,CAAb,CAEA,GAAMC,CAAAA,GAAG,CAAG,KAAKR,cAAL,CAAoBS,GAApB,CAAwB,SAACC,IAAD,CAAU,CAC1C,KAAI,CAACP,IAAL,EAAaO,IAAI,CAACP,IAAlB,CACA,KAAI,CAACC,QAAL,EAAiBM,IAAI,CAACN,QAAtB,CACA,KAAI,CAACC,KAAL,EAAcK,IAAI,CAACL,KAAnB,CACA,KAAI,CAACC,IAAL,EAAaI,IAAI,CAACJ,IAAlB,CACA,KAAI,CAACC,KAAL,EAAcI,MAAM,CAACD,IAAI,CAACH,KAAN,CAApB,CACA,MAAO,CACHJ,IAAI,CAAE,KAAI,CAACA,IADR,CAEHC,QAAQ,CAAE,KAAI,CAACA,QAFZ,CAGHC,KAAK,CAAE,KAAI,CAACA,KAHT,CAIHC,IAAI,CAAE,KAAI,CAACA,IAJR,CAKHC,KAAK,CAAE,KAAI,CAACA,KALT,CAAP,CAOH,CAbW,CAAZ,CAcA,KAAKN,cAAL,CAAsBO,GAAtB,CACH,C,oDAEaI,G,CAAK,CACf,KAAKZ,cAAL,CAAsBY,GAAtB,CACA,KAAKC,eAAL,GACH,C,8CAEUH,I,CAAM,CACb,KAAKV,cAAL,CAAoBc,IAApB,CAAyBJ,IAAzB,EACA,KAAKG,eAAL,GACH,C,0DAEgBL,G,CAAK,CAClB,KAAKN,aAAL,CAAqBM,GAArB,CACH,C,0CAEQO,C,CAAG,CACR,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,GAAmB,EAAvB,CAA2B,CACvBF,QAAQ,CAAG,KAAKlB,SAAhB,CACAiB,OAAO,CAAGC,QAAQ,CAACG,MAAT,CAAgB,SAAAV,IAAI,CAAI,CAC9B,GAAIA,IAAI,CAACW,IAAL,EAAa,IAAjB,CAAuB,CACnB,MAAO,KAAP,CACH,CAFD,IAEO,CACH,GAAMC,CAAAA,EAAE,CAAGZ,IAAI,CAACW,IAAL,CAAUE,WAAV,EAAX,CACA,GAAMC,CAAAA,KAAK,CAAGT,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeI,WAAf,EAAd,CACA,MAAOD,CAAAA,EAAE,CAACG,QAAH,CAAYD,KAAZ,CAAP,CACH,CACJ,CARS,CAAV,CASH,CAXD,IAWO,CACHR,OAAO,CAAGnB,QAAV,CACH,CACD,KAAKE,SAAL,CAAiBiB,OAAjB,CACH,C,6BAIL,MAAO,IAAMU,CAAAA,QAAQ,CAAG,GAAI5B,CAAAA,aAAJ,EAAjB","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { foodData } from \"../../components/Header/HeaderData\";\n\n\nclass FoodListStore {\n\n    foodsData = foodData\n    clickedProduct = [];\n    countedProduct = {};\n    actualProduct = {};\n    kcal = 0;\n    proteins = 0;\n    carbs = 0;\n    fats = 0;\n    eaten = 0;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    countingProduct() {\n        this.kcal = 0;\n        this.proteins = 0;\n        this.carbs = 0;\n        this.fats = 0;\n        this.eaten = 0;\n\n        const obj = this.clickedProduct.map((item) => {\n            this.kcal += item.kcal;\n            this.proteins += item.proteins;\n            this.carbs += item.carbs;\n            this.fats += item.fats;\n            this.eaten += Number(item.eaten)\n            return {\n                kcal: this.kcal,\n                proteins: this.proteins,\n                carbs: this.carbs,\n                fats: this.fats,\n                eaten: this.eaten\n            }\n        })\n        this.countedProduct = obj;\n    }\n\n    updateProduct(arr) {\n        this.clickedProduct = arr;\n        this.countingProduct();\n    }\n\n    addProduct(item) {\n        this.clickedProduct.push(item);\n        this.countingProduct();\n    }\n\n    addActualProduct(obj) {\n        this.actualProduct = obj;\n    }\n\n    filterEl(e) {\n        let newList = [];\n        let currList = [];\n        if (e.target.value !== \"\") {\n            currList = this.foodsData;\n            newList = currList.filter(item => {\n                if (item.name == null) {\n                    return null\n                } else {\n                    const lc = item.name.toLowerCase();\n                    const filtr = e.target.value.toLowerCase();\n                    return lc.includes(filtr);\n                }\n            })\n        } else {\n            newList = foodData;\n        }\n        this.foodsData = newList;\n    }\n\n}\n\nexport const products = new FoodListStore();"]},"metadata":{},"sourceType":"module"}