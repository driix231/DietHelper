{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport { foodData } from \"../../components/Header/HeaderData\";\n\nclass FoodListStore {\n  constructor() {\n    this.foodsData = foodData;\n    this.clickedProduct = [];\n    this.countedProduct = {};\n    this.actualProduct = {};\n    this.kcal = 0;\n    this.proteins = 0;\n    this.carbs = 0;\n    this.fats = 0;\n    this.eaten = 0;\n    makeAutoObservable(this);\n  }\n\n  countingProduct() {\n    this.kcal = 0;\n    this.proteins = 0;\n    this.carbs = 0;\n    this.fats = 0;\n    this.eaten = 0;\n    const obj = this.clickedProduct.map(item => {\n      this.kcal += item.kcal;\n      this.proteins += item.proteins;\n      this.carbs += item.carbs;\n      this.fats += item.fats;\n      this.eaten += Number(item.eaten);\n      return {\n        kcal: this.kcal,\n        proteins: this.proteins,\n        carbs: this.carbs,\n        fats: this.fats,\n        eaten: this.eaten\n      };\n    });\n    this.countedProduct = obj;\n  }\n\n  updateProduct(arr) {\n    this.clickedProduct = arr;\n    this.countingProduct();\n  }\n\n  addProduct(item) {\n    this.clickedProduct.push(item);\n    this.countingProduct();\n  }\n\n  addActualProduct(obj) {\n    this.actualProduct = obj;\n  }\n\n  filterEl(e) {\n    let newList = [];\n    let currList = [];\n\n    if (e.target.value !== \"\") {\n      currList = this.foodsData;\n      newList = currList.filter(item => {\n        if (item.name == null) {\n          return null;\n        } else {\n          const lc = item.name.toLowerCase();\n          const filtr = e.target.value.toLowerCase();\n          return lc.includes(filtr);\n        }\n      });\n    } else {\n      newList = foodData;\n    }\n\n    this.foodsData = newList;\n  }\n\n}\n\nexport const products = new FoodListStore();","map":{"version":3,"sources":["C:/Users/michal/Desktop/testowastrona/frontend/src/store/FoodList/FoodList.js"],"names":["makeAutoObservable","foodData","FoodListStore","constructor","foodsData","clickedProduct","countedProduct","actualProduct","kcal","proteins","carbs","fats","eaten","countingProduct","obj","map","item","Number","updateProduct","arr","addProduct","push","addActualProduct","filterEl","e","newList","currList","target","value","filter","name","lc","toLowerCase","filtr","includes","products"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,QAAT,QAAyB,oCAAzB;;AAGA,MAAMC,aAAN,CAAoB;AAYhBC,EAAAA,WAAW,GAAG;AAAA,SAVdC,SAUc,GAVFH,QAUE;AAAA,SATdI,cASc,GATG,EASH;AAAA,SARdC,cAQc,GARG,EAQH;AAAA,SAPdC,aAOc,GAPE,EAOF;AAAA,SANdC,IAMc,GANP,CAMO;AAAA,SALdC,QAKc,GALH,CAKG;AAAA,SAJdC,KAIc,GAJN,CAIM;AAAA,SAHdC,IAGc,GAHP,CAGO;AAAA,SAFdC,KAEc,GAFN,CAEM;AACVZ,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEDa,EAAAA,eAAe,GAAG;AACd,SAAKL,IAAL,GAAY,CAAZ;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,KAAL,GAAa,CAAb;AAEA,UAAME,GAAG,GAAG,KAAKT,cAAL,CAAoBU,GAApB,CAAyBC,IAAD,IAAU;AAC1C,WAAKR,IAAL,IAAaQ,IAAI,CAACR,IAAlB;AACA,WAAKC,QAAL,IAAiBO,IAAI,CAACP,QAAtB;AACA,WAAKC,KAAL,IAAcM,IAAI,CAACN,KAAnB;AACA,WAAKC,IAAL,IAAaK,IAAI,CAACL,IAAlB;AACA,WAAKC,KAAL,IAAcK,MAAM,CAACD,IAAI,CAACJ,KAAN,CAApB;AACA,aAAO;AACHJ,QAAAA,IAAI,EAAE,KAAKA,IADR;AAEHC,QAAAA,QAAQ,EAAE,KAAKA,QAFZ;AAGHC,QAAAA,KAAK,EAAE,KAAKA,KAHT;AAIHC,QAAAA,IAAI,EAAE,KAAKA,IAJR;AAKHC,QAAAA,KAAK,EAAE,KAAKA;AALT,OAAP;AAOH,KAbW,CAAZ;AAcA,SAAKN,cAAL,GAAsBQ,GAAtB;AACH;;AAEDI,EAAAA,aAAa,CAACC,GAAD,EAAM;AACf,SAAKd,cAAL,GAAsBc,GAAtB;AACA,SAAKN,eAAL;AACH;;AAEDO,EAAAA,UAAU,CAACJ,IAAD,EAAO;AACb,SAAKX,cAAL,CAAoBgB,IAApB,CAAyBL,IAAzB;AACA,SAAKH,eAAL;AACH;;AAEDS,EAAAA,gBAAgB,CAACR,GAAD,EAAM;AAClB,SAAKP,aAAL,GAAqBO,GAArB;AACH;;AAEDS,EAAAA,QAAQ,CAACC,CAAD,EAAI;AACR,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACvBF,MAAAA,QAAQ,GAAG,KAAKtB,SAAhB;AACAqB,MAAAA,OAAO,GAAGC,QAAQ,CAACG,MAAT,CAAgBb,IAAI,IAAI;AAC9B,YAAIA,IAAI,CAACc,IAAL,IAAa,IAAjB,EAAuB;AACnB,iBAAO,IAAP;AACH,SAFD,MAEO;AACH,gBAAMC,EAAE,GAAGf,IAAI,CAACc,IAAL,CAAUE,WAAV,EAAX;AACA,gBAAMC,KAAK,GAAGT,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeI,WAAf,EAAd;AACA,iBAAOD,EAAE,CAACG,QAAH,CAAYD,KAAZ,CAAP;AACH;AACJ,OARS,CAAV;AASH,KAXD,MAWO;AACHR,MAAAA,OAAO,GAAGxB,QAAV;AACH;;AACD,SAAKG,SAAL,GAAiBqB,OAAjB;AACH;;AAxEe;;AA4EpB,OAAO,MAAMU,QAAQ,GAAG,IAAIjC,aAAJ,EAAjB","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { foodData } from \"../../components/Header/HeaderData\";\n\n\nclass FoodListStore {\n\n    foodsData = foodData\n    clickedProduct = [];\n    countedProduct = {};\n    actualProduct = {};\n    kcal = 0;\n    proteins = 0;\n    carbs = 0;\n    fats = 0;\n    eaten = 0;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    countingProduct() {\n        this.kcal = 0;\n        this.proteins = 0;\n        this.carbs = 0;\n        this.fats = 0;\n        this.eaten = 0;\n\n        const obj = this.clickedProduct.map((item) => {\n            this.kcal += item.kcal;\n            this.proteins += item.proteins;\n            this.carbs += item.carbs;\n            this.fats += item.fats;\n            this.eaten += Number(item.eaten)\n            return {\n                kcal: this.kcal,\n                proteins: this.proteins,\n                carbs: this.carbs,\n                fats: this.fats,\n                eaten: this.eaten\n            }\n        })\n        this.countedProduct = obj;\n    }\n\n    updateProduct(arr) {\n        this.clickedProduct = arr;\n        this.countingProduct();\n    }\n\n    addProduct(item) {\n        this.clickedProduct.push(item);\n        this.countingProduct();\n    }\n\n    addActualProduct(obj) {\n        this.actualProduct = obj;\n    }\n\n    filterEl(e) {\n        let newList = [];\n        let currList = [];\n        if (e.target.value !== \"\") {\n            currList = this.foodsData;\n            newList = currList.filter(item => {\n                if (item.name == null) {\n                    return null\n                } else {\n                    const lc = item.name.toLowerCase();\n                    const filtr = e.target.value.toLowerCase();\n                    return lc.includes(filtr);\n                }\n            })\n        } else {\n            newList = foodData;\n        }\n        this.foodsData = newList;\n    }\n\n}\n\nexport const products = new FoodListStore();"]},"metadata":{},"sourceType":"module"}